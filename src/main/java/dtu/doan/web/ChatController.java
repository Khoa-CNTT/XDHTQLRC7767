package dtu.doan.web;

import dtu.doan.dto.MovieResponseDTO;
import dtu.doan.model.Movie;
import dtu.doan.model.ShowTime;
import dtu.doan.model.Ticket;
import dtu.doan.repository.ShowTimeRepository;
import dtu.doan.service.AccountService;
import dtu.doan.service.MovieService;
import dtu.doan.service.TicketService;
import dtu.doan.service.impl.OpenAiService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/chat")
public class ChatController {

    @Autowired
    private ShowTimeRepository showTimeRepository;
    @Autowired
    private MovieService movieService;
    @Autowired
    private AccountService accountService;
    @Autowired
    private OpenAiService openAiService;
    @Autowired
    private TicketService ticketService;

    @Value("${openai.api.key}")
    private String apiKey;

    private String getCurrentUsername() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication != null && authentication.isAuthenticated()) {
            Object principal = authentication.getPrincipal();
            return principal instanceof UserDetails ? ((UserDetails) principal).getUsername() : principal.toString();
        }
        return null;
    }

    @PostMapping
    public ResponseEntity<String> chat(@RequestBody String userQuestion) {

        String username = getCurrentUsername();
        if (username == null) {
            return ResponseEntity.badRequest().body("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.");
        }
        if (userQuestion == null || userQuestion.trim().isEmpty()) {
            return ResponseEntity.badRequest().body("C√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
        }
        Long idCustomer = accountService.getCustomerIdByUsername(username);
        List<Ticket> tickets = new ArrayList<>(ticketService.getTicketByCustomer(idCustomer));

        List<MovieResponseDTO> movieList = movieService.findAll();


        List<ShowTime> showTimes = showTimeRepository.findAll()
                .stream()
                .limit(30) // Gi·ªõi h·∫°n 30 su·∫•t chi·∫øu
                .toList();
        String ticketHistoryData = formatTicketHistory(tickets);
        String movieData = formatMovieData(movieList);
        String showTimeData = formatShowTimeData(showTimes);
        String instructions = getBookingInstructions();
        String suggestedMovies = suggestMovies(tickets, movieList);
        String upcomingShowTimes = suggestFutureShowTimes(showTimes);

        String prompt = String.format("""
                B·∫°n l√† m·ªôt nh√¢n vi√™n b√°n v√© t·∫°i r·∫°p phim. Nhi·ªám v·ª• c·ªßa b·∫°n l√†:
                - Gi·ªõi thi·ªáu c√°c su·∫•t chi·∫øu phim, th·ªùi gian, gi√° v√©, ph√≤ng chi·∫øu
                - Gi√∫p kh√°ch ch·ªçn su·∫•t chi·∫øu v√† gh·∫ø ng·ªìi
                - Tr·∫£ l·ªùi c√°c th·∫Øc m·∫Øc li√™n quan ƒë·∫øn phim, gi·ªù chi·∫øu, r·∫°p
                - KH√îNG tr·∫£ l·ªùi c√°c c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn r·∫°p phim
                - C√≥ th·ªÉ ƒë·ªÅ xu·∫•t l·∫°i phim kh√°ch ƒë√£ xem ho·∫∑c g·ª£i √Ω phim m·ªõi ph√π h·ª£p
                
                TH√îNG TIN PHIM:
                %s
                
                DANH S√ÅCH SU·∫§T CHI·∫æU:
                %s
                
                L·ªäCH S·ª¨ MUA V√â C·ª¶A NG∆Ø·ªúI D√ôNG:
                %s
                
                %s
                %s
                
                C√ÇU H·ªéI NG∆Ø·ªúI D√ôNG:
                %s
                """, movieData, showTimeData + instructions, ticketHistoryData, suggestedMovies, upcomingShowTimes, userQuestion);

        String answer = openAiService.ask(prompt, apiKey);
        return ResponseEntity.ok(answer);
    }

    private String formatTicketHistory(List<Ticket> tickets) {
        return tickets.stream().map(ticket -> {
            if (ticket == null || ticket.getShowTime() == null || ticket.getShowTime().getMovie() == null) {
                return "- Th√¥ng tin v√© kh√¥ng ƒë·∫ßy ƒë·ªß.";
            }
            return String.format(
                    "- M√£ v√©: %d\n  T√™n phim: %s\n  Ng√†y xem: %s\n  Gi·ªù b·∫Øt ƒë·∫ßu: %s\n  R·∫°p: %s\n  Tr·∫°ng th√°i: %s",
                    ticket.getId(),
                    ticket.getShowTime().getMovie().getName(),
                    ticket.getShowTime().getDate(),
                    ticket.getShowTime().getStartTime(),
                    ticket.getShowTime().getRoom() != null && ticket.getShowTime().getRoom().getCinema() != null
                            ? ticket.getShowTime().getRoom().getCinema().getName()
                            : "Kh√¥ng x√°c ƒë·ªãnh",
                    ticket.getUsed() ? "ƒê√£ s·ª≠ d·ª•ng" : "Ch∆∞a s·ª≠ d·ª•ng"
            );
        }).collect(Collectors.joining("\n\n"));
    }

    private String formatMovieData(List<MovieResponseDTO> movies) {
        return movies.stream().map(movie -> {
            if (movie == null) {
                return "- Th√¥ng tin phim kh√¥ng ƒë·∫ßy ƒë·ªß.";
            }
            String status = switch (movie.getStatus()) {
                case 1 -> "ƒêang chi·∫øu";
                case 0 -> "S·∫Øp chi·∫øu";
                case 2 -> "ƒê√£ chi·∫øu";
                default -> "Kh√¥ng x√°c ƒë·ªãnh";
            };

            String genres = movie.getMovieGenres() != null
                    ? movie.getMovieGenres().stream()
                    .map(g -> g.getName() != null ? g.getName() : "Kh√¥ng x√°c ƒë·ªãnh")
                    .collect(Collectors.joining(", "))
                    : "Kh√¥ng x√°c ƒë·ªãnh";

            String actors = movie.getActors() != null
                    ? String.join(", ", movie.getActors())
                    : "Kh√¥ng x√°c ƒë·ªãnh";

            return String.format("""
                            - T√™n phim: %s
                              M√¥ t·∫£: %s
                              ƒê·∫°o di·ªÖn: %s
                              Di·ªÖn vi√™n: %s
                              NƒÉm ph√°t h√†nh: %d
                              Qu·ªëc gia: %s
                              Ng√¥n ng·ªØ: %s
                              Th·ªùi l∆∞·ª£ng: %d ph√∫t
                              ƒê·ªô tu·ªïi: %d+
                              Ng√†y ph√°t h√†nh: %s
                              Tr·∫°ng th√°i: %s
                              Th·ªÉ lo·∫°i: %s
                            """,
                    movie.getName(), movie.getDescription(), movie.getDirector(),
                    actors, movie.getReleaseYear(), movie.getCountry(),
                    movie.getLanguage(), movie.getDuration(), movie.getAgeLimit(),
                    movie.getReleaseDate(), status, genres);
        }).collect(Collectors.joining("\n"));
    }

    private String formatShowTimeData(List<ShowTime> showTimes) {
        return showTimes.stream().map(st -> {
            if (st == null || st.getMovie() == null) {
                return "- Th√¥ng tin su·∫•t chi·∫øu kh√¥ng ƒë·∫ßy ƒë·ªß.";
            }
            String status = switch (st.getMovie().getStatus()) {
                case 1 -> "ƒêang chi·∫øu";
                case 0 -> "S·∫Øp chi·∫øu";
                case 2 -> "ƒê√£ chi·∫øu";
                default -> "Kh√¥ng x√°c ƒë·ªãnh";
            };
            return String.format("""
                            - T√™n phim: %s
                              Ng√†y: %s
                              Gi·ªù b·∫Øt ƒë·∫ßu: %s
                              Gi·ªù k·∫øt th√∫c: %s
                              Gi√° v√©: %d VND
                              Ph√≤ng chi·∫øu: %s
                              Tr·∫°ng th√°i: %s
                            """,
                    st.getMovie().getName(), st.getDate(), st.getStartTime(), st.getEndTime(),
                    st.getPricePerShowTime(),
                    st.getRoom() != null ? st.getRoom().getName() : "Kh√¥ng x√°c ƒë·ªãnh",
                    status);
        }).collect(Collectors.joining("\n"));
    }

    private String suggestMovies(List<Ticket> tickets, List<MovieResponseDTO> allMovies) {
        Set<String> watchedGenres = tickets.stream()
                .flatMap(ticket -> ticket.getShowTime().getMovie().getMovieGenres().stream())
                .map(g -> g.getGenre().getName())
                .collect(Collectors.toSet());

        Set<Long> watchedMovieIds = tickets.stream()
                .map(ticket -> ticket.getShowTime().getMovie().getId())
                .collect(Collectors.toSet());

        List<MovieResponseDTO> recommended = allMovies.stream()
                .filter(movie -> !watchedMovieIds.contains(movie.getId()))
                .filter(movie -> movie.getMovieGenres().stream()
                        .anyMatch(g -> watchedGenres.contains(g.getName())))
                .limit(10)
                .collect(Collectors.toList());

        if (recommended.isEmpty()) return "";

        String content = recommended.stream()
                .map(m -> String.format("- %s (%s)", m.getName(), m.getReleaseDate()))
                .collect(Collectors.joining("\n"));

        return "\n\nüëâ D·ª∞A TR√äN PHIM B·∫†N ƒê√É XEM, B·∫†N C√ì TH·ªÇ TH√çCH:\n" + content;
    }

    private String suggestFutureShowTimes(List<ShowTime> showTimes) {
        LocalDateTime now = LocalDateTime.now();
        String content = showTimes.stream()
                .filter(st -> st.getDate() != null && st.getStartTime() != null)
                .filter(st -> LocalDateTime.of(st.getDate(), st.getStartTime()).isAfter(now))
                .map(st -> String.format("- %s | %s | %s | %s", st.getMovie().getName(), st.getDate(), st.getStartTime(), st.getRoom().getName()))
                .collect(Collectors.joining("\n"));

        return "\n\nüëâ C√ÅC GI·ªú CHI·∫æU S·∫ÆP T·ªöI C√íN CH·ªñ:\n" + content;
    }

    private String getBookingInstructions() {
        return """
                \n\nüëâ ƒê·ªÉ ƒë·∫∑t v√©:
                1. ƒêƒÉng nh·∫≠p t√†i kho·∫£n th√†nh vi√™n
                2. Ch·ªçn phim mu·ªën xem
                3. Ch·ªçn r·∫°p v√† su·∫•t chi·∫øu
                4. Ch·ªçn gh·∫ø
                5. Thanh to√°n v√† nh·∫≠n m√£ QR qua email
                üëâ Mang m√£ QR ƒë·∫øn r·∫°p ƒë·ªÉ ƒë∆∞·ª£c ki·ªÉm tra tr∆∞·ªõc khi v√†o xem phim nh√©!
                """;
    }
}
